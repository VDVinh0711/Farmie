//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Other/FarmInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FarmInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FarmInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FarmInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""819a4850-4e63-40cd-91d8-1ae4549cfd53"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""117d993f-987e-4321-a663-0ff64ab8509c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6d5eeca9-40e3-444f-83eb-2f59d7e84fec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""18f392cb-a56d-49a5-b4d1-bdacf3cfaf92"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c24ff4e-65e7-4fed-911d-c51255e7b497"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""80e5c2ef-af79-4031-9aae-5f5f2c971d0f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ea49632-d61a-4d0d-8833-1e365bf2fd6d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""InteracPlayer"",
            ""id"": ""bf7ba001-38a8-42ee-a2ef-c4b6c4462244"",
            ""actions"": [
                {
                    ""name"": ""ShiftHold"",
                    ""type"": ""Button"",
                    ""id"": ""dffe4792-8041-4cae-a2eb-8e014c9947c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""e94d58da-434c-472b-b798-fe4c5df4f209"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enterclick"",
                    ""type"": ""Button"",
                    ""id"": ""8f8625d3-f4d4-41fa-99b2-c6f97948ab33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c7d9903-9d6b-4d84-b9d8-ddd34c52b363"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold(duration=1E-05,pressPoint=1E-05)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShiftHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ed077f8-c6a4-4f3f-9af0-6f5dd639d064"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9d7ecfd-5bca-4b61-b00d-04106ff42c85"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Enterclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        // InteracPlayer
        m_InteracPlayer = asset.FindActionMap("InteracPlayer", throwIfNotFound: true);
        m_InteracPlayer_ShiftHold = m_InteracPlayer.FindAction("ShiftHold", throwIfNotFound: true);
        m_InteracPlayer_Click = m_InteracPlayer.FindAction("Click", throwIfNotFound: true);
        m_InteracPlayer_Enterclick = m_InteracPlayer.FindAction("Enterclick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    public struct PlayerActions
    {
        private @FarmInputAction m_Wrapper;
        public PlayerActions(@FarmInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // InteracPlayer
    private readonly InputActionMap m_InteracPlayer;
    private List<IInteracPlayerActions> m_InteracPlayerActionsCallbackInterfaces = new List<IInteracPlayerActions>();
    private readonly InputAction m_InteracPlayer_ShiftHold;
    private readonly InputAction m_InteracPlayer_Click;
    private readonly InputAction m_InteracPlayer_Enterclick;
    public struct InteracPlayerActions
    {
        private @FarmInputAction m_Wrapper;
        public InteracPlayerActions(@FarmInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShiftHold => m_Wrapper.m_InteracPlayer_ShiftHold;
        public InputAction @Click => m_Wrapper.m_InteracPlayer_Click;
        public InputAction @Enterclick => m_Wrapper.m_InteracPlayer_Enterclick;
        public InputActionMap Get() { return m_Wrapper.m_InteracPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteracPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IInteracPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_InteracPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteracPlayerActionsCallbackInterfaces.Add(instance);
            @ShiftHold.started += instance.OnShiftHold;
            @ShiftHold.performed += instance.OnShiftHold;
            @ShiftHold.canceled += instance.OnShiftHold;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Enterclick.started += instance.OnEnterclick;
            @Enterclick.performed += instance.OnEnterclick;
            @Enterclick.canceled += instance.OnEnterclick;
        }

        private void UnregisterCallbacks(IInteracPlayerActions instance)
        {
            @ShiftHold.started -= instance.OnShiftHold;
            @ShiftHold.performed -= instance.OnShiftHold;
            @ShiftHold.canceled -= instance.OnShiftHold;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Enterclick.started -= instance.OnEnterclick;
            @Enterclick.performed -= instance.OnEnterclick;
            @Enterclick.canceled -= instance.OnEnterclick;
        }

        public void RemoveCallbacks(IInteracPlayerActions instance)
        {
            if (m_Wrapper.m_InteracPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteracPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_InteracPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteracPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteracPlayerActions @InteracPlayer => new InteracPlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IInteracPlayerActions
    {
        void OnShiftHold(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnEnterclick(InputAction.CallbackContext context);
    }
}
